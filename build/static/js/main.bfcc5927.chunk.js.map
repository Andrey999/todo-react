{"version":3,"sources":["TodoItem.js","Todo.js","App.js","serviceWorker.js","index.js"],"names":["TodoItem","state","isDone","isShowTask","handleLabelDecoration","event","_this","currentTarget","setState","_this2","this","_this$state","_this$props","props","propsValue","handleDeleteTask","react_default","a","createElement","className","map","item","key","id","type","value","Date","htmlFor","onClick","Component","Todo","task","addValueToItem","length","inputValue","concat","handleInputChange","target","_this$state2","placeholder","onChange","onKeyPress","src_TodoItem_0","App","src_Todo_0","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"wSAmEeA,oNA/DPC,MAAQ,CACJC,QAAQ,EACRC,YAAY,KAGpBC,sBAAwB,SAACC,GAAU,IACvBH,EAAWI,EAAKL,MAAhBC,OACLG,EAAME,eACLD,EAAKE,SAAS,CAAGN,QAASA,6EAKzB,IAAAO,EAAAC,KAAAC,EAC0BD,KAAKT,MAA5BC,EADHS,EACGT,OADHU,GAAAD,EACWR,WACyBO,KAAKG,OAAtCC,EAFHF,EAEGE,WAAYC,EAFfH,EAEeG,iBAEpB,OACIC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YACXH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,kBAENL,EAAWM,IAAI,SAAAC,GACX,OAAOL,EAAAC,EAAAC,cAAA,MAAII,IAAKD,EAAKE,GAAIJ,UAAWjB,EAAS,SAAW,MACpDc,EAAAC,EAAAC,cAAA,SAAOM,KAAK,WAAWD,GAAIF,EAAKE,GAAIE,OAAQ,IAAIC,KAAQP,UAAU,WAC9DH,EAAAC,EAAAC,cAAA,SAAOS,QAASN,EAAKE,GAAIK,QAASnB,EAAKL,uBAAwBiB,EAAKI,OACpET,EAAAC,EAAAC,cAAA,QAAMC,UAAU,wBAAwBS,QAASb,EAAiBM,EAAKE,KAAvE,oBA1BbM,cC0DRC,oNAvDX7B,MAAQ,CACJ8B,KAAM,GACNN,MAAO,MAIXO,eAAiB,SAAC3B,GAAU,IAAAM,EACAL,EAAKL,MAArBwB,EADgBd,EAChBc,MAAOM,EADSpB,EACToB,KAEf,KAAIN,EAAMQ,OAAS,GAAmB,UAAd5B,EAAMiB,KAW1B,OAAO,EAVP,IAAMY,EAAa,CACfT,MAAOA,EACPF,IAAK,IAAIG,MAGbpB,EAAKE,SAAU,CACXuB,KAAMA,EAAKI,OAAOD,GAClBT,MAAO,QAOnBV,iBAAmB,eAInBqB,kBAAoB,SAAC/B,GACjBC,EAAKE,SAAS,CAAGiB,MAAOpB,EAAMgC,OAAOZ,iFAGhC,IAAAa,EACmB5B,KAAKT,MAArBwB,EADHa,EACGb,MAAOM,EADVO,EACUP,KAEf,OACIf,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACPH,EAAAC,EAAAC,cAAA,SAAOM,KAAK,OACLL,UAAU,YACVoB,YAAY,iFACZd,MAAOA,EACPe,SAAW9B,KAAK0B,kBAChBK,WAAa/B,KAAKsB,iBAG7BhB,EAAAC,EAAAC,cAACwB,EAAD,CACI5B,WAAaiB,EACbhB,iBAAkBL,KAAKK,2BAhDxBc,cCWJc,MAXf,WACE,OACE3B,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACXH,EAAAC,EAAAC,cAAA,qBACAF,EAAAC,EAAAC,cAAC0B,EAAD,SCEQC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOnC,EAAAC,EAAAC,cAACkC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.bfcc5927.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport './TodoItem.css'\r\n\r\nclass TodoItem extends Component {\r\n        state = {\r\n            isDone: false,\r\n            isShowTask: false\r\n        };\r\n\r\n    handleLabelDecoration = (event) => {\r\n        const { isDone } = this.state;\r\n        if(event.currentTarget) {\r\n            this.setState({  isDone: !isDone });\r\n\r\n        }\r\n    };\r\n\r\n    render() {\r\n        const { isDone, isShowTask } = this.state;\r\n        const { propsValue, handleDeleteTask } = this.props;\r\n\r\n        return (\r\n            <div className='todoList'>\r\n                <ul className=\"todolist__item\">\r\n                    {\r\n                        propsValue.map(item => {\r\n                            return <li key={item.id} className={isDone ? 'active' : null }>\r\n                                <input type=\"checkbox\" id={item.id} value={+new Date()} className=\"toggle\" />\r\n                                    <label htmlFor={item.id} onClick={this.handleLabelDecoration}>{item.value}</label>\r\n                                    <span className=\"todolist__item-delete\" onClick={handleDeleteTask(item.id)} >&times;</span>\r\n                            </li>\r\n                        })\r\n                    }\r\n                </ul>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n// const TodoItem = ({propsValue, handleLabelDecoration, handleDeleteTask, isShowTask}) => {\r\n//\r\n//     console.log('handleLabelDecoration:', handleLabelDecoration,\r\n//         'handleDeleteTask:', handleDeleteTask,\r\n//         'isShowTask: ', isShowTask);\r\n//\r\n//     return (\r\n//         <div className='todoList'>\r\n//             <ul className=\"todolist__item\">\r\n//                 {\r\n//                     propsValue.map(item => {\r\n//                         return <li key={item.id}>\r\n//                             { isShowTask === true ? <div><input type=\"checkbox\" id={item.id} className=\"toggle\"/>\r\n//                                 <label htmlFor={item.id} onClick={handleLabelDecoration}>{item.value}</label>\r\n//                                 <span className=\"todolist__item-delete\" onClick={handleDeleteTask} >&times;</span>\r\n//                             </div> : null\r\n//                             }\r\n//                         </li>\r\n//                     })\r\n//                 }\r\n//             </ul>\r\n//         </div>\r\n//     );\r\n// };\r\n\r\nexport default TodoItem;\r\n","import React, { Component } from 'react';\r\nimport TodoItem from './TodoItem';\r\n\r\nimport './Todo.css';\r\n\r\nclass Todo extends Component {\r\n    state = {\r\n        task: [],\r\n        value: '',\r\n    };\r\n\r\n    // добавляем  Task при клике на Enter\r\n    addValueToItem = (event) => {\r\n        const { value, task } = this.state;\r\n\r\n        if (value.length > 3 && event.key === 'Enter') {\r\n            const inputValue = {\r\n                value: value,\r\n                id: +new Date(),\r\n            };\r\n\r\n            this.setState( {\r\n                task: task.concat(inputValue),\r\n                value: '',\r\n            });\r\n        } else {\r\n            return false;\r\n        }\r\n    };\r\n\r\n    handleDeleteTask = () => {\r\n\r\n    };\r\n\r\n    handleInputChange = (event) => {\r\n        this.setState({  value: event.target.value  })\r\n    };\r\n\r\n    render() {\r\n        const { value, task } = this.state;\r\n\r\n        return(\r\n            <div className=\"todo\">\r\n                    <input type=\"text\"\r\n                           className=\"todoInput\"\r\n                           placeholder=\"Создайте свой Task\"\r\n                           value={value}\r\n                           onChange={ this.handleInputChange }\r\n                           onKeyPress={ this.addValueToItem }\r\n                    />\r\n\r\n                <TodoItem\r\n                    propsValue={ task }\r\n                    handleDeleteTask={this.handleDeleteTask}\r\n                />\r\n            </div>\r\n        )\r\n    }\r\n\r\n}\r\n\r\nexport default Todo;","import React from 'react';\nimport './App.css';\n\nimport Todo from './Todo'\n\nfunction App() {\n  return (\n    <div className=\"container\">\n        <div className=\"app\">\n            <h1>TodoApp</h1>\n            <Todo />\n        </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}