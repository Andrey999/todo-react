{"version":3,"sources":["TodoItem.js","Todo.js","App.js","serviceWorker.js","index.js"],"names":["TodoItem","_ref","propsValue","handleLabelDecoration","handleDeleteTask","console","log","react_default","a","createElement","className","map","item","key","id","type","htmlFor","onClick","value","Todo","state","task","isDone","addValueToItem","event","_this$state","_this","length","inputValue","Date","setState","concat","target","handleChange","_this$state2","this","placeholder","onChange","onKeyPress","src_TodoItem_0","Component","App","src_Todo_0","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"wSA6BeA,SA1BE,SAAAC,GAA6D,IAA1DC,EAA0DD,EAA1DC,WAAYC,EAA8CF,EAA9CE,sBAAuBC,EAAuBH,EAAvBG,iBAKnD,OAHAC,QAAQC,IAAI,yBAAyBH,EACjC,oBAAqBC,GAGrBG,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YACXH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,kBAENR,EAAWS,IAAI,SAAAC,GACX,OAAOL,EAAAC,EAAAC,cAAA,MAAII,IAAKD,EAAKE,IAKjBP,EAAAC,EAAAC,cAAA,SAAOM,KAAK,WAAWD,GAAIF,EAAKE,GAAIJ,UAAU,WAC9CH,EAAAC,EAAAC,cAAA,SAAOO,QAASJ,EAAKE,GAAIG,QAAUd,GAAyBS,EAAKM,OACjEX,EAAAC,EAAAC,cAAA,UAAQC,UAAU,wBAAwBO,QAAUb,GAApD,eCyDbe,oNAvEXC,MAAQ,CACJC,KAAM,GACNH,MAAO,GACPI,QAAQ,KAIZC,eAAiB,SAACC,GAAU,IAAAC,EACQC,EAAKN,MAA7BF,EADgBO,EAChBP,MAAOG,EADSI,EACTJ,KADSI,EACHH,OAErB,KAAIJ,EAAMS,OAAS,GAAmB,UAAdH,EAAMX,KAY1B,OAAO,EAXP,IAAMe,EAAa,CACfV,MAAOA,EACPJ,IAAK,IAAIe,KACTP,QAAQ,GAGZI,EAAKI,SAAU,CACXT,KAAMA,EAAKU,OAAOH,GAClBV,MAAO,QAQnBf,sBAAwB,SAACqB,GAAU,IACvBF,EAAWI,EAAKN,MAAhBE,OAELE,EAAMQ,QACLN,EAAKI,SAAS,CAAGR,QAASI,EAAKN,MAAME,SAEzCjB,QAAQC,IAAIgB,MAIhBlB,iBAAmB,SAACoB,GAChBnB,QAAQC,IAAIkB,EAAMQ,WAItBC,aAAe,SAACT,GACZE,EAAKI,SAAS,CAAGZ,MAAOM,EAAMQ,OAAOd,iFAGhC,IAAAgB,EACmBC,KAAKf,MAArBF,EADHgB,EACGhB,MAAOG,EADVa,EACUb,KAGf,OAFAhB,QAAQC,IAAIe,GAGRd,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACPH,EAAAC,EAAAC,cAAA,SAAOM,KAAK,OACLL,UAAU,YACV0B,YAAY,iFACZlB,MAAOA,EACPmB,SAAWF,KAAKF,aAChBK,WAAaH,KAAKZ,iBAG7BhB,EAAAC,EAAAC,cAAC8B,EAAD,CACIrC,WAAamB,EACblB,sBAAwBgC,KAAKhC,sBAC7BC,iBAAmB+B,KAAK/B,2BAhEzBoC,cCWJC,MAXf,WACE,OACElC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACXH,EAAAC,EAAAC,cAAA,qBACAF,EAAAC,EAAAC,cAACiC,EAAD,SCEQC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO1C,EAAAC,EAAAC,cAACyC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.a557f322.chunk.js","sourcesContent":["import React from 'react';\r\nimport './TodoItem.css'\r\n\r\nconst TodoItem = ({ propsValue, handleLabelDecoration, handleDeleteTask }) => {\r\n\r\n    console.log('handleLabelDecoration:',handleLabelDecoration,\r\n        'handleDeleteTask:', handleDeleteTask);\r\n\r\n    return (\r\n        <div className='todoList'>\r\n            <ul className=\"todolist__item\">\r\n                {\r\n                    propsValue.map(item => {\r\n                        return <li key={item.id}>\r\n                            {\r\n\r\n                            }\r\n\r\n                            <input type=\"checkbox\" id={item.id} className=\"toggle\"/>\r\n                            <label htmlFor={item.id} onClick={ handleLabelDecoration }>{item.value}</label>\r\n                            <button className=\"todolist__item-delete\" onClick={ handleDeleteTask }>&times;</button>\r\n                        </li>\r\n                    })\r\n                }\r\n            </ul>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default TodoItem;\r\n","import React, { Component } from 'react';\r\nimport TodoItem from './TodoItem';\r\n\r\nimport './Todo.css';\r\n\r\nclass Todo extends Component {\r\n    state = {\r\n        task: [],\r\n        value: '',\r\n        isDone: false\r\n    };\r\n\r\n    // добавляем  Task при клике на Enter\r\n    addValueToItem = (event) => {\r\n        const { value, task, isDone } = this.state;\r\n\r\n        if (value.length > 3 && event.key === 'Enter') {\r\n            const inputValue = {\r\n                value: value,\r\n                id: +new Date(),\r\n                isDone: true\r\n            };\r\n\r\n            this.setState( {\r\n                task: task.concat(inputValue),\r\n                value: '',\r\n            });\r\n        } else {\r\n            return false;\r\n        }\r\n    };\r\n\r\n\r\n    handleLabelDecoration = (event) => {\r\n        const { isDone } = this.state;\r\n\r\n        if(event.target) {\r\n            this.setState({  isDone: !this.state.isDone  });\r\n        }\r\n        console.log(isDone)\r\n    };\r\n\r\n\r\n    handleDeleteTask = (event) => {\r\n        console.log(event.target)\r\n    };\r\n\r\n    //\r\n    handleChange = (event) => {\r\n        this.setState({  value: event.target.value  })\r\n    };\r\n\r\n    render() {\r\n        const { value, task } = this.state;\r\n        console.log(task);\r\n\r\n        return(\r\n            <div className=\"todo\">\r\n                    <input type=\"text\"\r\n                           className=\"todoInput\"\r\n                           placeholder=\"Создайте свой Task\"\r\n                           value={value}\r\n                           onChange={ this.handleChange }\r\n                           onKeyPress={ this.addValueToItem }\r\n                    />\r\n\r\n                <TodoItem\r\n                    propsValue={ task }\r\n                    handleLabelDecoration={ this.handleLabelDecoration }\r\n                    handleDeleteTask={ this.handleDeleteTask }\r\n                />\r\n            </div>\r\n        )\r\n    }\r\n\r\n}\r\n\r\nexport default Todo;","import React from 'react';\nimport './App.css';\n\nimport Todo from './Todo'\n\nfunction App() {\n  return (\n    <div className=\"container\">\n        <div className=\"app\">\n            <h1>TodoApp</h1>\n            <Todo />\n        </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}